# Change Log
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/).

The major and minor parts of the version number indicate the compatibility
with the ASP.NET Core framework version (2.2.\*, 3.0.\*, 5.0.\*, 7.0.\*) and only
the build part is actually indicating the release version of the project.

## 8.0.1 - 2023-11-19

### Fixed
* [First call to Blazor app fails with InvalidOperationException: 'RemoteNavigationManager' has not been initialized](https://github.com/lord-executor/Ninject.Web.AspNetCore/issues/12)
  * This fixes a pre-existing issue with the wrong scope provider being used for ImplementationFactory services

## 8.0.0 - 2023-11-14

### Changed
* Updated projects to multi-target .NET 8, 7, 6 and 5

## 7.0.0 - 2023-01-21

### Changed
* Updated projects to multi-target .NET 7, 6 and 5
* Updated sample project ports since Chrome considered the old ones unsafe

## 6.1.2

### Fixed
* [Ninject DI with SignalR in AspNetCore](https://github.com/lord-executor/Ninject.Web.AspNetCore/issues/10)
  * This fixes an issue with resolving open generic bindings with _nested_ binding constraints

## 6.1.1

### Changed
* Referencing Ninject version 3.3.6 which includes an important bugfix for 3.3.5

## 6.1.0

### Added
* Support for running Blazor applications with Ninject.Web.AspNetCore

### Changed
* Improved `IServiceProvider` binding to be compliant with Microsoft.Extensions.DI assumptions specifically with regards to injecting the `IServiceProvider` into singletons

## 6.0.0

### Added
* New page for sample application that shows memory usage

### Changed
* Updated projects to multi-target .NET 5 and .NET 6
* Small .NET 6 compatibility updates

## 5.1.2 - 2021-10-27

### Changed
* More improvements with memory management
  * Using custom activation cache to simplify the reverse disposal implementation

## 5.1.1 - 2021-10-19

### Changed
* `RequestScopeMiddleware` no longer implements `IMiddleware` so that it is instantiated as a singleton
* Fixed concurrency issues with `DisposalManager.CreateArea()` and disposal
  * This could lead to undefined behavior in high load situations
* Improved debugging support of `DisposalManager` to allow (public) inspection of the weak references to activated services
* Added `AspNetCoreKernel.DisableAutomaticSelfBinding()` as a convenience method

## 5.1.0 - 2021-09-07

### Added
* Added compliance tests for Microsoft.Extensions.DependencyInjection
* Added `ServiceProviderScopeResolutionRoot` as the underlying mechanism for `NinjectServiceProvider`
  * This allows for special treatment of requests made through the service provider

### Changed
* Updated implementation to be fully compliant with all the existing .NET 5 tests
  * Significant changes in service disposal, binding precedence and resolving open generics
  * See README section "Compliance with Microsoft.Extensions.DependencyInjection" for more details

## [*.*.3] - 2021-05-08

### Changed
* `RequestScope` is now inheriting from `Ninject.Infrastructure.Disposal.DisposableObject`
  and therefore implements `INotifyWhenDisposed` which means that services that are tied
  to the request scope will be disposed _immediately_ when the request scope is disposed.
  This should improve the memory performance since objects bound to the request scope
  can release their unmanaged resources sooner.

## [*.*.2] - 2020-11-19

With this update, some of the class names had their inconsistent naming
fixed from "NInject" to "Ninject". The compiler will complain when you
update and the issue is trivial to fix.

### Added
* Added support for custom controller activator type

### Changed
* `NinjectServiceProvider` is now implementing `ISupportRequiredService`
  and provides much better exceptions when a required service cannot be
  resolved

### Fixed
* Consolidated class naming (fixed "NInject" to "Ninject")

## [*.*.1] - 2020-11-11

### Added
* Configurable blocking behavior of INinjectSelfHost implementation
* Signing assemblies with a strong name

### Fixed
* Added missing develop static web assets configuration for ASP.NET Core 3+

## [*.*.0] - 2020-11-08

Initial release for internal testing and figuring out the release procedure with NuGet packages.
